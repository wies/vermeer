(set-option :print-success false)
(set-option :produce-proofs false)
(set-option :produce-unsat-cores false)
(set-option :timeout 10000)
(reset)
(set-option :print-success false)
(set-option :produce-proofs true)
(set-option :produce-unsat-cores true)
(set-logic QF_LIA)
(define-sort Unknown () Int)
(declare-fun x_0_0 () Int)
(declare-fun x_0_1 () Int)
(declare-fun x_0_2 () Int)
(declare-fun x_0_3 () Int)
(declare-fun x_0_4 () Int)
(declare-fun x_0_5 () Int)
(declare-fun x_0_6 () Int)
(declare-fun x_10_0 () Int)
(declare-fun x_11_0 () Int)
(declare-fun x_11_1 () Int)
(declare-fun x_12_0 () Int)
(declare-fun x_12_1 () Int)
(declare-fun x_13_0 () Int)
(declare-fun x_13_1 () Int)
(declare-fun x_13_2 () Int)
(declare-fun x_14_0 () Int)
(declare-fun x_15_0 () Int)
(declare-fun x_15_1 () Int)
(declare-fun x_16_0 () Int)
(declare-fun x_16_1 () Int)
(declare-fun x_16_2 () Int)
(declare-fun x_17_0 () Int)
(declare-fun x_17_1 () Int)
(declare-fun x_17_2 () Int)
(declare-fun x_18_0 () Int)
(declare-fun x_18_1 () Int)
(declare-fun x_18_2 () Int)
(declare-fun x_19_0 () Int)
(declare-fun x_1_0 () Int)
(declare-fun x_1_1 () Int)
(declare-fun x_1_2 () Int)
(declare-fun x_1_3 () Int)
(declare-fun x_1_4 () Int)
(declare-fun x_1_5 () Int)
(declare-fun x_20_0 () Int)
(declare-fun x_20_1 () Int)
(declare-fun x_21_0 () Int)
(declare-fun x_21_1 () Int)
(declare-fun x_21_2 () Int)
(declare-fun x_21_3 () Int)
(declare-fun x_22_0 () Int)
(declare-fun x_22_1 () Int)
(declare-fun x_22_2 () Int)
(declare-fun x_23_0 () Int)
(declare-fun x_23_1 () Int)
(declare-fun x_23_2 () Int)
(declare-fun x_24_0 () Int)
(declare-fun x_24_1 () Int)
(declare-fun x_24_2 () Int)
(declare-fun x_2_0 () Int)
(declare-fun x_3_0 () Int)
(declare-fun x_4_0 () Int)
(declare-fun x_5_0 () Int)
(declare-fun x_6_0 () Int)
(declare-fun x_6_1 () Int)
(declare-fun x_6_2 () Int)
(declare-fun x_6_3 () Int)
(declare-fun x_7_0 () Int)
(declare-fun x_8_0 () Int)
(declare-fun x_9_0 () Int)
(assert (! true :named CON_66))
(assert (! (= x_1_0 0 ) :named PS_2))
(assert (! (= x_1_1 0 ) :named PS_3))
(assert (! (=> (< (+ (- 4) x_1_1 ) 0 ) (= x_2_0 867125240 ) ) :named PS_4))
(assert (! (= x_1_2 (+ 1 x_1_1 ) ) :named PS_5))
(assert (! (=> (< (+ (- 4) x_1_2 ) 0 ) (= x_3_0 6470688 ) ) :named PS_6))
(assert (! (= x_1_3 (+ 1 x_1_2 ) ) :named PS_7))
(assert (! (=> (< (+ (- 4) x_1_3 ) 0 ) (= x_4_0 6470692 ) ) :named PS_8))
(assert (! (= x_1_4 (+ 1 x_1_3 ) ) :named PS_9))
(assert (! (=> (< (+ (- 4) x_1_4 ) 0 ) (= x_5_0 6470696 ) ) :named PS_10))
(assert (! (= x_1_5 (+ 1 x_1_4 ) ) :named PS_11))
(assert (! (= x_0_0 0 ) :named PS_12))
(assert (! (= x_6_0 4207864 ) :named PS_13))
(assert (! (= x_6_1 0 ) :named PS_14))
(assert (! (=> (< (+ (- 4) x_6_1 ) 0 ) (= x_7_0 4336160 ) ) :named PS_15))
(assert (! (=> (< (+ (- 4) x_6_1 ) 0 ) (= x_6_2 (+ 1 x_6_1 ) ) ) :named PS_16))
(assert (! (=> (< (+ (- 4) x_6_2 ) 0 ) (= x_8_0 6470688 ) ) :named PS_17))
(assert (! (= x_14_0 6470692 ) :named PS_18))
(assert (! (= x_15_0 0 ) :named PS_19))
(assert (! (= x_15_1 2 ) :named PS_20))
(assert (! (= x_16_0 (- 1531625995) ) :named PS_21))
(assert (! (=> (= (+ (- 2) x_15_1 ) 0 ) (= x_16_1 0 ) ) :named PS_22))
(assert (! (=> (and (< (+ (- 9) x_16_1 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_17_0 0 ) ) :named PS_23))
(assert (! (=> (and (< (+ (- 9) x_16_1 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_17_1 x_0_0 ) ) :named PS_24))
(assert (! (=> (and (< (+ (- 9) x_16_1 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_17_2 (+ 10 x_17_1 ) ) ) :named PS_25))
(assert (! (=> (and (< (+ (- 9) x_16_1 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_0_1 x_17_2 ) ) :named PS_26))
(assert (! (=> (and (< (+ (- 9) x_16_1 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (distinct (+ (- 4390) x_17_2 ) 0 ) ) :named PS_27))
(assert (! (=> (= (+ (- 2) x_15_1 ) 0 ) (= x_16_2 (+ 1 x_16_1 ) ) ) :named PS_28))
(assert (! (=> (and (< (+ (- 9) x_16_2 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_18_0 10 ) ) :named PS_29))
(assert (! (=> (and (< (+ (- 9) x_16_2 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_18_1 x_0_1 ) ) :named PS_30))
(assert (! (=> (and (< (+ (- 9) x_16_2 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_18_2 (+ 10 x_18_1 ) ) ) :named PS_31))
(assert (! (=> (and (< (+ (- 9) x_16_2 ) 0 ) (= (+ (- 2) x_15_1 ) 0 ) ) (= x_0_2 x_18_2 ) ) :named PS_32))
(assert (! (=> (< (+ (- 4) x_6_2 ) 0 ) (= x_6_3 (+ 1 x_6_2 ) ) ) :named PS_33))
(assert (! (=> (< (+ (- 4) x_6_3 ) 0 ) (= x_9_0 6470692 ) ) :named PS_34))
(assert (! (= x_19_0 6470696 ) :named PS_35))
(assert (! (= x_20_0 0 ) :named PS_36))
(assert (! (= x_20_1 1 ) :named PS_37))
(assert (! (= x_21_0 (- 1531625995) ) :named PS_38))
(assert (! (=> (= (+ (- 1) x_20_1 ) 0 ) (= x_21_1 0 ) ) :named PS_39))
(assert (! (=> (and (< (+ (- 9) x_21_1 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_22_0 11160 ) ) :named PS_40))
(assert (! (=> (and (< (+ (- 9) x_21_1 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_22_1 x_0_2 ) ) :named PS_41))
(assert (! (=> (and (< (+ (- 9) x_21_1 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_22_2 (+ 1 x_22_1 ) ) ) :named PS_42))
(assert (! (=> (and (< (+ (- 9) x_21_1 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_0_3 x_22_2 ) ) :named PS_43))
(assert (! (=> (and (< (+ (- 9) x_21_1 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (distinct (+ (- 24) x_22_2 ) 0 ) ) :named PS_44))
(assert (! (=> (= (+ (- 1) x_20_1 ) 0 ) (= x_21_2 (+ 1 x_21_1 ) ) ) :named PS_45))
(assert (! (=> (and (< (+ (- 9) x_21_2 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_23_0 21 ) ) :named PS_46))
(assert (! (=> (and (< (+ (- 9) x_21_2 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_23_1 x_0_3 ) ) :named PS_47))
(assert (! (=> (and (< (+ (- 9) x_21_2 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_23_2 (+ 1 x_23_1 ) ) ) :named PS_48))
(assert (! (=> (and (< (+ (- 9) x_21_2 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_0_4 x_23_2 ) ) :named PS_49))
(assert (! (=> (and (< (+ (- 9) x_21_2 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (distinct (+ (- 24) x_23_2 ) 0 ) ) :named PS_50))
(assert (! (=> (= (+ (- 1) x_20_1 ) 0 ) (= x_21_3 (+ 1 x_21_2 ) ) ) :named PS_51))
(assert (! (=> (and (< (+ (- 9) x_21_3 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_24_0 22 ) ) :named PS_52))
(assert (! (=> (and (< (+ (- 9) x_21_3 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_24_1 x_0_4 ) ) :named PS_53))
(assert (! (=> (and (< (+ (- 9) x_21_3 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_24_2 (+ 1 x_24_1 ) ) ) :named PS_54))
(assert (! (=> (and (< (+ (- 9) x_21_3 ) 0 ) (= (+ (- 1) x_20_1 ) 0 ) ) (= x_0_5 x_24_2 ) ) :named PS_55))
(assert (! (= x_10_0 6470688 ) :named PS_56))
(assert (! (= x_11_0 0 ) :named PS_57))
(assert (! (= x_11_1 1 ) :named PS_58))
(assert (! (= x_12_0 (- 1531625995) ) :named PS_59))
(assert (! (=> (= (+ (- 1) x_11_1 ) 0 ) (= x_12_1 0 ) ) :named PS_60))
(assert (! (=> (and (< (+ (- 9) x_12_1 ) 0 ) (= (+ (- 1) x_11_1 ) 0 ) ) (= x_13_0 11160 ) ) :named PS_61))
(assert (! (=> (and (< (+ (- 9) x_12_1 ) 0 ) (= (+ (- 1) x_11_1 ) 0 ) ) (= x_13_1 x_0_5 ) ) :named PS_62))
(assert (! (=> (and (< (+ (- 9) x_12_1 ) 0 ) (= (+ (- 1) x_11_1 ) 0 ) ) (= x_13_2 (+ 1 x_13_1 ) ) ) :named PS_63))
(assert (! (=> (and (< (+ (- 9) x_12_1 ) 0 ) (= (+ (- 1) x_11_1 ) 0 ) ) (= x_0_6 x_13_2 ) ) :named PS_64))
(assert (! (=> (and (< (+ (- 9) x_12_1 ) 0 ) (= (+ (- 1) x_11_1 ) 0 ) ) (distinct (+ (- 24) x_13_2 ) 0 ) ) :named PS_65))
(check-sat)
(get-unsat-core)
(exit)
