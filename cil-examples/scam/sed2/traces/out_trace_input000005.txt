GNU gdb (GDB) 7.7
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-unknown-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ../sed...done.
(gdb) > > >>(gdb) Breakpoint 1 at 0x401234: file sed.tendered.c, line 1341.
(gdb) Starting program: /home/chanseok/src/failure-explanation/Subjects/sed1/sed -f pattern000005 file000005

Breakpoint 1, main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1341
1341	  char *e_strings = (void *)0;
(gdb) 1342	  int compiled = 0;
1345	  re_set_syntax(1 << 1 << 1 | 1 << 1 << 1 << 1 << 1 << 1 << 1 | 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 | 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 | 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 << 1 | 1 << 1);
re_set_syntax (syntax=66246) at sed.tendered.c:7868
7868	  reg_syntax_t ret = re_syntax_options;
7870	  (re_syntax_options = syntax, printf("LOG: re_syntax_options modified.\n"), re_syntax_options);
7871	  return ret;
7872	}
main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1346
1346	  (rx_cache_bound = 4096, printf("LOG: rx_cache_bound modified.\n"), rx_cache_bound);
1347	  (myname = "Executable", printf("LOG: myname modified.\n"), myname);
1348	  while ( /*+ WHILE STMT BROKEN DOWN */
1349	        ((opt = getopt_long(argc, argv, "hne:f:V", longopts, (int *)0), printf("LOG: opt modified.\n"), opt)) != -1) {
1348	  while ( /*+ WHILE STMT BROKEN DOWN */
1350	    switch (opt) {
1366	      if (e_strings) {
1371	      compile_file(optarg);
compile_file (str=0x7fffffffe426 "pattern000005") at sed.tendered.c:1468
1468	  (prog_start = (prog_cur = (prog_end = 0, printf("LOG: prog_end modified.\n"), prog_end), printf("LOG: prog_cur modified.\n"), prog_cur), printf("LOG: prog_start modified.\n"), prog_start);
1469	  (prog_name = str, printf("LOG: prog_name modified.\n"), prog_name);
1470	  (prog_line = 1, printf("LOG: prog_line modified.\n"), prog_line);
1471	  if (str[0] == '-' && /*+ AND EXP BROKEN DOWN */
1475	    (prog_file = ck_fopen(str, "r"), printf("LOG: prog_file modified.\n"), prog_file);
ck_fopen (name=0x7fffffffe426 "pattern000005", mode=0x41647a "r") at sed.tendered.c:2760
2760	  (ret = fopen(name, mode), printf("LOG: ret modified.\n"), ret);
2761	  if (ret == (FILE *)0)
2764	      (n = 0, printf("LOG: n modified.\n"), n); /*+ FOR STMT BROKEN DOWN */
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2767	    if (ret == __id_s[n].fp) {
2766	       n++) /*+ FOR STMT BROKEN DOWN */ {
2763	  for ( /*+ FOR STMT BROKEN DOWN */
2774	  if (n == 32) {
2776	        (n = 0, printf("LOG: n modified.\n"), n); /*+ FOR STMT BROKEN DOWN */
2775	    for ( /*+ FOR STMT BROKEN DOWN */
2779	      if (__id_s[n].fp == (FILE *)0)
2780	        break;
2781	    if (n == 32)
2783	    (__id_s[n].fp = ret, printf("LOG: __id_s[n].fp modified.\n"), __id_s[n].fp);
2784	    (__id_s[n].name = (char *)ck_malloc(strlen(name) + 1), printf("LOG: __id_s[n].name modified.\n"), __id_s[n].name);
ck_malloc (size=14) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
ck_fopen (name=0x7fffffffe426 "pattern000005", mode=0x41647a "r") at sed.tendered.c:2785
2785	    strcpy(__id_s[n].name, name);
2787	  return ret;
2788	}
compile_file (str=0x7fffffffe426 "pattern000005") at sed.tendered.c:1476
1476	  (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1477	  if (ch == '#') {
1489	  } else if (ch != -1)
1490	    ungetc(ch, prog_file);
1491	  (the_program = compile_program(the_program, prog_line), printf("LOG: the_program modified.\n"), the_program);
compile_program (vector=0x0, open_line=1) at sed.tendered.c:1499
1499	  int ch = 0;
1506	  if (!vector) {
1507	    (vector = (struct vector *)ck_malloc(sizeof(struct vector)), printf("LOG: vector modified.\n"), vector);
ck_malloc (size=32) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1508
1508	    (vector->v = (struct sed_cmd *)ck_malloc(40 * sizeof(struct sed_cmd)), printf("LOG: vector->v modified.\n"), vector->v);
ck_malloc (size=4480) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1509
1509	    (vector->v_allocated = 40, printf("LOG: vector->v_allocated modified.\n"), vector->v_allocated);
1510	    (vector->v_length = 0, printf("LOG: vector->v_length modified.\n"), vector->v_length);
1511	    (vector->return_v = 0, printf("LOG: vector->return_v modified.\n"), vector->return_v);
1512	    (vector->return_i = 0, printf("LOG: vector->return_i modified.\n"), vector->return_i);
1520	      (pch = ch, printf("LOG: pch modified.\n"), pch);
1521	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1858	    prog_line++;
1859	  return ch;
1860	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1522
1522	      if (pch == '\\' && /*+ AND EXP BROKEN DOWN */
1529	        ch == ';'));
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1526	          ch != -1 && /*+ AND EXP BROKEN DOWN */
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1520	      (pch = ch, printf("LOG: pch modified.\n"), pch);
1521	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1522
1522	      if (pch == '\\' && /*+ AND EXP BROKEN DOWN */
1529	        ch == ';'));
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1526	          ch != -1 && /*+ AND EXP BROKEN DOWN */
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1528	        ch == '\n' || /*+ OR EXP BROKEN DOWN */
1531	    if (ch == -1)
1533	    savchar(ch);
savchar (ch=47) at sed.tendered.c:1865
1865	  if (ch == -1)
1867	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1870	  if (prog_file)
1871	    ungetc(ch, prog_file);
1874	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1534
1534	    if (vector->v_length == vector->v_allocated) {
1538	    (cur_cmd = vector->v + vector->v_length, printf("LOG: cur_cmd modified.\n"), cur_cmd);
1539	    vector->v_length++;
1540	    (cur_cmd->a1.addr_type = 0, printf("LOG: cur_cmd->a1.addr_type modified.\n"), cur_cmd->a1.addr_type);
1541	    (cur_cmd->a2.addr_type = 0, printf("LOG: cur_cmd->a2.addr_type modified.\n"), cur_cmd->a2.addr_type);
1542	    (cur_cmd->aflags = 0, printf("LOG: cur_cmd->aflags modified.\n"), cur_cmd->aflags);
1543	    (cur_cmd->cmd = 0, printf("LOG: cur_cmd->cmd modified.\n"), cur_cmd->cmd);
1544	    if (compile_address(&cur_cmd->a1)) {
compile_address (addr=0x6202a0) at sed.tendered.c:1882
1882	  (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_address (addr=0x6202a0) at sed.tendered.c:1883
1883	  if ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISdigit) {
1913	  } else if (ch == '/' || /*+ OR EXP BROKEN DOWN */
1915	    (addr->addr_type = addr_is_regex, printf("LOG: addr->addr_type modified.\n"), addr->addr_type);
1916	    if (ch == '\\')
1918	    buffer_regex(ch);
buffer_regex (slash=47) at sed.tendered.c:1946
1946	  int char_class_pos = -1;
1948	  (b = init_buffer(), printf("LOG: b modified.\n"), b);
init_buffer () at sed.tendered.c:2858
2858	  (b = (struct buffer *)ck_malloc(sizeof(struct buffer)), printf("LOG: b modified.\n"), b);
ck_malloc (size=16) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
init_buffer () at sed.tendered.c:2859
2859	  (b->allocated = 50, printf("LOG: b->allocated modified.\n"), b->allocated);
2860	  (b->b = (char *)ck_malloc(50), printf("LOG: b->b modified.\n"), b->b);
ck_malloc (size=50) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
init_buffer () at sed.tendered.c:2861
2861	  (b->length = 0, printf("LOG: b->length modified.\n"), b->length);
2862	  return (void *)b;
2863	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1953	    if (ch == '^') {
1960	    } else if (ch == '$') {
1969	    } else if (ch == '[') {
1974	    } else if (ch == ']') {
1988	    } else if (ch != '\\' || /*+ OR EXP BROKEN DOWN */
1993	    (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1994
1994	    switch (ch) {
2001	      add1_buffer(b, '\\');
add1_buffer (bb=0x621430, ch=92) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:2002
2002	      add1_buffer(b, ch);
add1_buffer (bb=0x621430, ch=0) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:2003
2003	      break;
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1953	    if (ch == '^') {
1960	    } else if (ch == '$') {
1969	    } else if (ch == '[') {
1974	    } else if (ch == ']') {
1988	    } else if (ch != '\\' || /*+ OR EXP BROKEN DOWN */
1993	    (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1994
1994	    switch (ch) {
2001	      add1_buffer(b, '\\');
add1_buffer (bb=0x621430, ch=92) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:2002
2002	      add1_buffer(b, ch);
add1_buffer (bb=0x621430, ch=0) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:2003
2003	      break;
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1953	    if (ch == '^') {
1960	    } else if (ch == '$') {
1969	    } else if (ch == '[') {
1974	    } else if (ch == ']') {
1988	    } else if (ch != '\\' || /*+ OR EXP BROKEN DOWN */
1990	      add1_buffer(b, ch);
add1_buffer (bb=0x621430, ch=0) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:1991
1991	      continue;
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1858	    prog_line++;
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1953	    if (ch == '^') {
1960	    } else if (ch == '$') {
1969	    } else if (ch == '[') {
1974	    } else if (ch == ']') {
1988	    } else if (ch != '\\' || /*+ OR EXP BROKEN DOWN */
1990	      add1_buffer(b, ch);
add1_buffer (bb=0x621430, ch=10) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:1991
1991	      continue;
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1858	    prog_line++;
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1953	    if (ch == '^') {
1960	    } else if (ch == '$') {
1969	    } else if (ch == '[') {
1974	    } else if (ch == ']') {
1988	    } else if (ch != '\\' || /*+ OR EXP BROKEN DOWN */
1990	      add1_buffer(b, ch);
add1_buffer (bb=0x621430, ch=10) at sed.tendered.c:2915
2915	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2916	  if (b->length + 1 > b->allocated) {
2920	  (b->b[b->length] = ch, printf("LOG: b->b[b->length] modified.\n"), b->b[b->length]);
2921	  b->length++;
2922	}
buffer_regex (slash=47) at sed.tendered.c:1991
1991	      continue;
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
buffer_regex (slash=47) at sed.tendered.c:1949
1949	  while ( /*+ WHILE STMT BROKEN DOWN */
1950	        ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
1951	      (ch != slash || /*+ OR EXP BROKEN DOWN */
2006	  if (ch == -1)
2008	  if (size_buffer(b)) {
size_buffer (b=0x621430) at sed.tendered.c:2883
2883	  (bb = (struct buffer *)b, printf("LOG: bb modified.\n"), bb);
2884	  return bb->length;
2885	}
buffer_regex (slash=47) at sed.tendered.c:2009
2009	    if (last_regex_string)
2012	      (last_regex_string = (char *)ck_malloc(size_buffer(b) + 1), printf("LOG: last_regex_string modified.\n"), last_regex_string);
size_buffer (b=0x621430) at sed.tendered.c:2883
2883	  (bb = (struct buffer *)b, printf("LOG: bb modified.\n"), bb);
2884	  return bb->length;
2885	}
ck_malloc (size=8) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
buffer_regex (slash=47) at sed.tendered.c:2013
2013	    bcopy(get_buffer(b), last_regex_string, size_buffer(b));
size_buffer (b=0x621430) at sed.tendered.c:2883
2883	  (bb = (struct buffer *)b, printf("LOG: bb modified.\n"), bb);
2884	  return bb->length;
2885	}
get_buffer (bb=0x621430) at sed.tendered.c:2929
2929	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2930	  return b->b;
2931	}
buffer_regex (slash=47) at sed.tendered.c:2014
2014	    (last_regex_string[size_buffer(b)] = 0, printf("LOG: last_regex_string[size_buffer(b)] modified.\n"), last_regex_string[size_buffer(b)]);
size_buffer (b=0x621430) at sed.tendered.c:2883
2883	  (bb = (struct buffer *)b, printf("LOG: bb modified.\n"), bb);
2884	  return bb->length;
2885	}
size_buffer (b=0x621430) at sed.tendered.c:2883
2883	  (bb = (struct buffer *)b, printf("LOG: bb modified.\n"), bb);
2884	  return bb->length;
2885	}
buffer_regex (slash=47) at sed.tendered.c:2017
2017	  flush_buffer(b);
flush_buffer (bb=0x621430) at sed.tendered.c:2870
2870	  (b = (struct buffer *)bb, printf("LOG: b modified.\n"), b);
2871	  free(b->b);
2872	  (b->b = 0, printf("LOG: b->b modified.\n"), b->b);
2873	  (b->allocated = 0, printf("LOG: b->allocated modified.\n"), b->allocated);
2874	  (b->length = 0, printf("LOG: b->length modified.\n"), b->length);
2875	  free(b);
2876	}
buffer_regex (slash=47) at sed.tendered.c:2018
2018	}
compile_address (addr=0x6202a0) at sed.tendered.c:1919
1919	    (addr->addr_regex = last_regex, printf("LOG: addr->addr_regex modified.\n"), addr->addr_regex);
1921	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_address (addr=0x6202a0) at sed.tendered.c:1924
1924	        (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1923	          ch != -1 && /*+ AND EXP BROKEN DOWN */
1925	    savchar(ch);
savchar (ch=123) at sed.tendered.c:1865
1865	  if (ch == -1)
1867	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1870	  if (prog_file)
1871	    ungetc(ch, prog_file);
1874	}
compile_address (addr=0x6202a0) at sed.tendered.c:1926
1926	    return 1;
1939	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1545
1545	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1546
1546	      if (ch == ',') {
1558	        savchar(ch);
savchar (ch=123) at sed.tendered.c:1865
1865	  if (ch == -1)
1867	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1870	  if (prog_file)
1871	    ungetc(ch, prog_file);
1874	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1560
1560	    if (cur_cmd->a1.addr_type == addr_is_num && /*+ AND EXP BROKEN DOWN */
1564	    (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1565
1565	    if (ch == -1)
1568	    switch (ch) {
1621	      (cur_cmd->cmd = ch, printf("LOG: cur_cmd->cmd modified.\n"), cur_cmd->cmd);
1622	      program_depth++;
1623	      (cur_cmd->x.sub = compile_program((struct vector *)0, prog_line), printf("LOG: cur_cmd->x.sub modified.\n"), cur_cmd->x.sub);
compile_program (vector=0x0, open_line=4) at sed.tendered.c:1499
1499	  int ch = 0;
1506	  if (!vector) {
1507	    (vector = (struct vector *)ck_malloc(sizeof(struct vector)), printf("LOG: vector modified.\n"), vector);
ck_malloc (size=32) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1508
1508	    (vector->v = (struct sed_cmd *)ck_malloc(40 * sizeof(struct sed_cmd)), printf("LOG: vector->v modified.\n"), vector->v);
ck_malloc (size=4480) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1509
1509	    (vector->v_allocated = 40, printf("LOG: vector->v_allocated modified.\n"), vector->v_allocated);
1510	    (vector->v_length = 0, printf("LOG: vector->v_length modified.\n"), vector->v_length);
1511	    (vector->return_v = 0, printf("LOG: vector->return_v modified.\n"), vector->return_v);
1512	    (vector->return_i = 0, printf("LOG: vector->return_i modified.\n"), vector->return_i);
1520	      (pch = ch, printf("LOG: pch modified.\n"), pch);
1521	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1522
1522	      if (pch == '\\' && /*+ AND EXP BROKEN DOWN */
1529	        ch == ';'));
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1526	          ch != -1 && /*+ AND EXP BROKEN DOWN */
1527	        ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank || /*+ OR EXP BROKEN DOWN */
1528	        ch == '\n' || /*+ OR EXP BROKEN DOWN */
1531	    if (ch == -1)
1533	    savchar(ch);
savchar (ch=33) at sed.tendered.c:1865
1865	  if (ch == -1)
1867	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1870	  if (prog_file)
1871	    ungetc(ch, prog_file);
1874	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1534
1534	    if (vector->v_length == vector->v_allocated) {
1538	    (cur_cmd = vector->v + vector->v_length, printf("LOG: cur_cmd modified.\n"), cur_cmd);
1539	    vector->v_length++;
1540	    (cur_cmd->a1.addr_type = 0, printf("LOG: cur_cmd->a1.addr_type modified.\n"), cur_cmd->a1.addr_type);
1541	    (cur_cmd->a2.addr_type = 0, printf("LOG: cur_cmd->a2.addr_type modified.\n"), cur_cmd->a2.addr_type);
1542	    (cur_cmd->aflags = 0, printf("LOG: cur_cmd->aflags modified.\n"), cur_cmd->aflags);
1543	    (cur_cmd->cmd = 0, printf("LOG: cur_cmd->cmd modified.\n"), cur_cmd->cmd);
1544	    if (compile_address(&cur_cmd->a1)) {
compile_address (addr=0x6214e0) at sed.tendered.c:1882
1882	  (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_address (addr=0x6214e0) at sed.tendered.c:1883
1883	  if ((*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISdigit) {
1913	  } else if (ch == '/' || /*+ OR EXP BROKEN DOWN */
1927	  } else if (ch == '$') {
1937	    savchar(ch);
savchar (ch=33) at sed.tendered.c:1865
1865	  if (ch == -1)
1867	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1870	  if (prog_file)
1871	    ungetc(ch, prog_file);
1874	}
compile_address (addr=0x6214e0) at sed.tendered.c:1938
1938	  return 0;
1939	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1560
1560	    if (cur_cmd->a1.addr_type == addr_is_num && /*+ AND EXP BROKEN DOWN */
1564	    (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1565
1565	    if (ch == -1)
1568	    switch (ch) {
1583	      if (cur_cmd->aflags & 02)
1585	      (cur_cmd->aflags |= 02, printf("LOG: cur_cmd->aflags modified.\n"), cur_cmd->aflags);
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1587	        (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1590
1590	          (*__ctype_b_loc())[(int)ch] & (unsigned short int)_ISblank);
1589	            ch != -1 && /*+ AND EXP BROKEN DOWN */
1591	      if (ch == -1)
1593	      goto new_cmd;
1568	    switch (ch) {
1628	      if (!program_depth)
1630	      --program_depth;
1631	      (cur_cmd->cmd = ch, printf("LOG: cur_cmd->cmd modified.\n"), cur_cmd->cmd);
1632	      if (cur_cmd->a1.addr_type != 0)
1634	      while ( /*+ WHILE STMT BROKEN DOWN */
1635	            ((ch = inchar(), printf("LOG: ch modified.\n"), ch)) != -1 && /*+ AND EXP BROKEN DOWN */
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1846	      (ch = _IO_getc(prog_file), printf("LOG: ch modified.\n"), ch);
1856	  if (ch == '\n' && /*+ AND EXP BROKEN DOWN */
1859	  return ch;
1860	}
compile_program (vector=0x6214b0, open_line=4) at sed.tendered.c:1634
1634	      while ( /*+ WHILE STMT BROKEN DOWN */
1640	      return vector;
1827	}
1624	      (cur_cmd->x.sub->return_v = vector, printf("LOG: cur_cmd->x.sub->return_v modified.\n"), cur_cmd->x.sub->return_v);
1625	      (cur_cmd->x.sub->return_i = vector->v_length - 1, printf("LOG: cur_cmd->x.sub->return_i modified.\n"), cur_cmd->x.sub->return_i);
1626	      break;
1821	  }
1520	      (pch = ch, printf("LOG: pch modified.\n"), pch);
1521	      (ch = inchar(), printf("LOG: ch modified.\n"), ch);
inchar () at sed.tendered.c:1842
1842	  if (prog_file) {
1843	    if (feof(prog_file))
1844	      return -1;
1860	}
compile_program (vector=0x620270, open_line=1) at sed.tendered.c:1522
1522	      if (pch == '\\' && /*+ AND EXP BROKEN DOWN */
1529	        ch == ';'));
1531	    if (ch == -1)
1532	      break;
1822	  if (program_depth) {
1826	  return vector;
1827	}
compile_file (str=0x7fffffffe426 "pattern000005") at sed.tendered.c:1492
1492	}
main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1372
1372	      (compiled = 1, printf("LOG: compiled modified.\n"), compiled);
1373	      break;
1349	        ((opt = getopt_long(argc, argv, "hne:f:V", longopts, (int *)0), printf("LOG: opt modified.\n"), opt)) != -1) {
1348	  while ( /*+ WHILE STMT BROKEN DOWN */
1386	  if (e_strings) {
1390	  if (!compiled) {
1396	      (go = jumps, printf("LOG: go modified.\n"), go); /*+ FOR STMT BROKEN DOWN */
1395	  for ( /*+ FOR STMT BROKEN DOWN */
1410	  (line.length = 0, printf("LOG: line.length modified.\n"), line.length);
1411	  (line.alloc = 50, printf("LOG: line.alloc modified.\n"), line.alloc);
1412	  (line.text = ck_malloc(50), printf("LOG: line.text modified.\n"), line.text);
ck_malloc (size=50) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1413
1413	  (append.length = 0, printf("LOG: append.length modified.\n"), append.length);
1414	  (append.alloc = 50, printf("LOG: append.alloc modified.\n"), append.alloc);
1415	  (append.text = ck_malloc(50), printf("LOG: append.text modified.\n"), append.text);
ck_malloc (size=50) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1416
1416	  (hold.length = 1, printf("LOG: hold.length modified.\n"), hold.length);
1417	  (hold.alloc = 50, printf("LOG: hold.alloc modified.\n"), hold.alloc);
1418	  (hold.text = ck_malloc(50), printf("LOG: hold.text modified.\n"), hold.text);
ck_malloc (size=50) at sed.tendered.c:2811
2811	  if (!size)
2813	  (ret = malloc(size), printf("LOG: ret modified.\n"), ret);
2814	  if (ret == (void *)0)
2816	  return ret;
2817	}
main (argc=4, argv=0x7fffffffe108) at sed.tendered.c:1419
1419	  (hold.text[0] = '\n', printf("LOG: hold.text[0] modified.\n"), hold.text[0]);
1420	  if (argc <= optind) {
1424	    while ( /*+ WHILE STMT BROKEN DOWN */
1425	          optind < argc) {
1424	    while ( /*+ WHILE STMT BROKEN DOWN */
1426	      if (optind == argc - 1)
1427	        last_input_file++;
1428	      read_file(argv[optind]);
read_file (name=0x7fffffffe434 "file000005") at sed.tendered.c:2112
2112	  if (*name == '-' && /*+ AND EXP BROKEN DOWN */
2116	    (input_file = fopen(name, "r"), printf("LOG: input_file modified.\n"), input_file);
2117	    if (input_file == 0) {
2125	  while ( /*+ WHILE STMT BROKEN DOWN */
2126	        read_pattern_space()) {
read_pattern_space () at sed.tendered.c:2590
2590	  (p = line.text, printf("LOG: p modified.\n"), p);
2591	  (n = line.alloc, printf("LOG: n modified.\n"), n);
2592	  if (feof(input_file))
2594	  input_line_number++;
2595	  (replaced = 0, printf("LOG: replaced modified.\n"), replaced);
2600	    if (n == 0) {
2606	    (ch = _IO_getc(input_file), printf("LOG: ch modified.\n"), ch);
2607	    if (ch == -1) {
2615	    (*p++ = ch, printf("LOG: *p++ modified.\n"), *p++);
LOG: re_syntax_options modified.
LOG: rx_cache_bound modified.
LOG: myname modified.
LOG: opt modified.
LOG: prog_end modified.
LOG: prog_cur modified.
LOG: prog_start modified.
LOG: prog_name modified.
LOG: prog_line modified.
LOG: ret modified.
LOG: n modified.
LOG: n modified.
LOG: __id_s[n].fp modified.
LOG: ret modified.
LOG: __id_s[n].name modified.
LOG: prog_file modified.
LOG: ch modified.
LOG: ret modified.
LOG: vector modified.
LOG: ret modified.
LOG: vector->v modified.
LOG: vector->v_allocated modified.
LOG: vector->v_length modified.
LOG: vector->return_v modified.
LOG: vector->return_i modified.
LOG: pch modified.
LOG: ch modified.
LOG: ch modified.
LOG: pch modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd modified.
LOG: cur_cmd->a1.addr_type modified.
LOG: cur_cmd->a2.addr_type modified.
LOG: cur_cmd->aflags modified.
LOG: cur_cmd->cmd modified.
LOG: ch modified.
LOG: ch modified.
LOG: addr->addr_type modified.
LOG: ret modified.
LOG: b modified.
LOG: b->allocated modified.
LOG: ret modified.
LOG: b->b modified.
LOG: b->length modified.
LOG: b modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: ch modified.
LOG: ch modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: ch modified.
LOG: ch modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: ch modified.
LOG: ch modified.
LOG: b modified.
LOG: b->b[b->length] modified.
LOG: ch modified.
LOG: ch modified.
LOG: bb modified.
LOG: bb modified.
LOG: ret modified.
LOG: last_regex_string modified.
LOG: bb modified.
LOG: b modified.
LOG: bb modified.
LOG: last_regex_string[size_buffer(b)] modified.
LOG: bb modified.
LOG: b modified.
LOG: b->b modified.
LOG: b->allocated modified.
LOG: b->length modified.
LOG: addr->addr_regex modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd->cmd modified.
LOG: ret modified.
LOG: vector modified.
LOG: ret modified.
LOG: vector->v modified.
LOG: vector->v_allocated modified.
LOG: vector->v_length modified.
LOG: vector->return_v modified.
LOG: vector->return_i modified.
LOG: pch modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd modified.
LOG: cur_cmd->a1.addr_type modified.
LOG: cur_cmd->a2.addr_type modified.
LOG: cur_cmd->aflags modified.
LOG: cur_cmd->cmd modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd->aflags modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd->cmd modified.
LOG: ch modified.
LOG: ch modified.
LOG: cur_cmd->x.sub modified.
LOG: cur_cmd->x.sub->return_v modified.
LOG: cur_cmd->x.sub->return_i modified.
LOG: pch modified.
LOG: ch modified.
LOG: the_program modified.
LOG: compiled modified.
LOG: opt modified.
LOG: go modified.
LOG: line.length modified.
LOG: line.alloc modified.
LOG: ret modified.
LOG: line.text modified.
LOG: append.length modified.
LOG: append.alloc modified.
LOG: ret modified.
LOG: append.text modified.
LOG: hold.length modified.
LOG: hold.alloc modified.
LOG: ret modified.
LOG: hold.text modified.
LOG: hold.text[0] modified.
LOG: input_file modified.
LOG: p modified.
LOG: n modified.
LOG: replaced modified.
LOG: ch modified.
LOG: *p2616	    --n;
2617	    if (ch == '\n') {
2621	  }
2600	    if (n == 0) {
2606	    (ch = _IO_getc(input_file), printf("LOG: ch modified.\n"), ch);
2607	    if (ch == -1) {
2615	    (*p++ = ch, printf("LOG: *p++ modified.\n"), *p++);
2616	    --n;
2617	    if (ch == '\n') {
2618	      (line.length = line.alloc - n, printf("LOG: line.length modified.\n"), line.length);
2619	      break;
2622	  (ch = _IO_getc(input_file), printf("LOG: ch modified.\n"), ch);
2623	  if (ch != -1)
2624	    ungetc(ch, input_file);
2627	  return 1;
2628	}
read_file (name=0x7fffffffe434 "file000005") at sed.tendered.c:2125
2125	  while ( /*+ WHILE STMT BROKEN DOWN */
2127	    execute_program(the_program);
execute_program (vec=0x620270) at sed.tendered.c:2179
2179	  struct vector *restart_vec = vec;
2182	  (vec = restart_vec, printf("LOG: vec modified.\n"), vec);
2183	  (count = 0, printf("LOG: count modified.\n"), count);
2184	  (end_cycle = 0, printf("LOG: end_cycle modified.\n"), end_cycle);
2186	      (cur_cmd = vec->v, printf("LOG: cur_cmd modified.\n"), cur_cmd), (n = vec->v_length, printf("LOG: n modified.\n"), n); /*+ FOR STMT BROKEN DOWN */
2185	  for ( /*+ FOR STMT BROKEN DOWN */
2190	    (addr_matched = 0, printf("LOG: addr_matched modified.\n"), addr_matched);
2191	    if (cur_cmd->aflags & 01) {
2195	    } else if (match_address(&cur_cmd->a1)) {
match_address (addr=0x6202a0) at sed.tendered.c:2556
2556	  switch (addr->addr_type) {
2566	      int trail_nl_p = line.text[line.length - 1] == '\n';
2569	      re_search(addr->addr_regex, line.text, line.length - trail_nl_p, 0, line.length - trail_nl_p, (struct re_registers *)0) >= 0 ?  /*+ COND EXP BROKEN DOWN */
re_search (rxb=0x0, string=0x621430 "", size=2, startpos=0, range=2, regs=0x0) at sed.tendered.c:7835
7835	  return re_search_2(rxb, 0, 0, string, size, startpos, range, regs, size);
re_search_2 (rxb=0x0, string1=0x0, size1=0, string2=0x621430 "", size2=2, startpos=0, range=2, regs=0x0, stop=2)
    at sed.tendered.c:6693
6693	  regoff_t *lparen = 0;
6694	  regoff_t *rparen = 0;
6695	  regoff_t *best_lpspace = 0;
6696	  regoff_t *best_rpspace = 0;
6703	  unsigned num_regs = rxb->re_nsub + 1;

Program received signal SIGSEGV, Segmentation fault.
0x000000000041136d in re_search_2 (rxb=0x0, string1=0x0, size1=0, string2=0x621430 "", size2=2, startpos=0, range=2, regs=0x0, 
    stop=2) at sed.tendered.c:6703
6703	  unsigned num_regs = rxb->re_nsub + 1;

Program terminated with signal SIGSEGV, Segmentation fault.
The program no longer exists.
(gdb) quit
